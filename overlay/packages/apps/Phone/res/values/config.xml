<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2009 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- Phone app resources that may need to be customized
     for different hardware or product builds. -->
<resources>
    <!-- Flag indicating whether the Phone app should ignore
         EVENT_SIM_NETWORK_LOCKED events from the Sim.  If true, this will
         prevent the IccNetworkDepersonalizationPanel from being shown,
         and effectively disable the "Sim network lock" feature. -->
    <bool name="ignore_sim_network_locked_events">false</bool>

    <!-- Flag indicating whether the Phone app should provide
         a "Dismiss" button on the SIM network unlock screen.
         The default value is true.
         If set to false, there will be *no way* to dismiss the SIM
         network unlock screen if you don't enter the correct unlock code.
         (One important consequence: there will be no way to make an
         Emergency Call if your SIM is network-locked and you don't know
         the PIN.) -->
    <bool name="sim_network_unlock_allow_dismiss">true</bool>

    <!-- If true, enable the onscreen touch UI for incoming calls.
         This feature is necessary for devices with no hard SEND/END keys,
         and optional on all other devices. -->
    <bool name="allow_incoming_call_touch_ui">true</bool>

    <!-- If true, enable the onscreen touch UI for regular "ongoing call"
         states of the in-call UI.
         In general, the touch UI is used for regular calls only on
         devices with a proximity sensor.  (On other devices, we can't
         have touchable UI onscreen during a call because of the risk of
         false cheek touches.)
         TODO: maybe this can be determined algorithmically based on
         specific properties of the device, perhaps by detecting the
         presence of a proximity sensor and/or hard SEND/END keys.  (If
         so, we wouldn't need this flag at all.) -->
    <bool name="allow_in_call_touch_ui">true</bool>

    <!-- OTA configuration values, used when provisioning CDMA devices.
         Following defaults values of zero means OTA UI is completely disabled.
         These OTA UI can be enabled by setting config value to one in the product
         specific overlay file -->

    <!-- Determine whether we want to display the OTA activation screen, which
         gives the user option to activate or cancel -->
    <integer name="OtaShowActivationScreen">1</integer>
    <!-- Determine whether we should show the "listen for instructions" screen after
         successfully placing the OTA call -->
    <integer name="OtaShowListeningScreen">1</integer>
    <!-- The number of times we should show the activation screen/allow the provisioning
         to fail before just showing an unsuccessful dialog -->
    <integer name="OtaShowActivateFailTimes">0</integer>
    <!-- Determine whether or not we should play the success/failure tone -->
    <integer name="OtaPlaySuccessFailureTone">0</integer>

    <!-- Flag indicating if the phone is a world phone -->
    <bool name="world_phone">false</bool>

    <!-- If true, enable vibration (haptic feedback) for key presses
         in the EmergencyDialer activity. The pattern is set on a
         per-platform basis using config_virtualKeyVibePattern.  To be
         consistent with the regular Dialer, this value should agree
         with the corresponding values from config.xml under
         apps/Contacts. -->
    <bool name="config_enable_dialer_key_vibration">true</bool>

    <!-- Flag indicating if the tty is enabled -->
    <bool name="tty_enabled">false</bool>

    <!-- Flag indicating if hac is enabled -->
    <bool name="hac_enabled">false</bool>

    <!-- Flag indicating if dtmf tone type is enabled -->
    <bool name="dtmf_type_enabled">false</bool>

    <!-- Flag indicating if auto retry is enabled -->
    <bool name="auto_retry_enabled">false</bool>

    <!-- Determine whether we want to play local DTMF tones in a call, or
         just let the radio/BP handle playing of the tones. -->
    <bool name="allow_local_dtmf_tones">true</bool>

    <!-- While an incoming call is ringing, this flag specifies whether
         the BACK key should reject the current call (just like the
         ENDCALL button does.)
         This was originally the default behavior for all platforms, but
         it's a bad idea on devices where the BACK key is a capacitive
         button (since it's too easy to press the key accidentally as you
         pull the phone out of your pocket.)  So devices that *don't* want
         this behavior should set this flag to false via the resource
         overlay.  -->
    <bool name="allow_back_key_to_reject_incoming_call">false</bool>

    <!-- If true, show an onscreen "Dial" button in the dialer.
         In practice this is used on all platforms even the ones with hard SEND/END
         keys, but for maximum flexibility it's controlled by a flag here
         (which can be overridden on a per-product basis.) -->
    <bool name="config_show_onscreen_dial_button">true</bool>

    <!-- Determine whether calls to mute the microphone in PhoneUtils
         are routed through the android.media.AudioManager class (true) or through
         the com.android.internal.telephony.Phone interface (false). -->
    <bool name="send_mic_mute_to_AudioManager">false</bool>

    <!-- Determines if device implements a noise suppression device for in call audio-->
    <bool name="has_in_call_noise_suppression">true</bool>

</resources>
